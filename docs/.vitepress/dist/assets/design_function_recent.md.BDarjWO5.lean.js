import{_ as s,c as i,a0 as a,o as e}from"./chunks/framework.B_Gi1r42.js";const E=JSON.parse('{"title":"Recent功能逻辑","description":"","frontmatter":{},"headers":[],"relativePath":"design/function/recent.md","filePath":"design/function/recent.md","lastUpdated":null}'),n={name:"design/function/recent.md"};function l(h,t,r,d,p,k){return e(),i("div",null,t[0]||(t[0]=[a(`<h1 id="recent功能逻辑" tabindex="-1">Recent功能逻辑 <a class="header-anchor" href="#recent功能逻辑" aria-label="Permalink to &quot;Recent功能逻辑&quot;">​</a></h1><h2 id="功能原理" tabindex="-1">功能原理 <a class="header-anchor" href="#功能原理" aria-label="Permalink to &quot;功能原理&quot;">​</a></h2><p>对于某个用户，如果启用了recent功能，则服务器会记录每天的数据，计算今日数据和昨日数据的差值就能获取到近期数据</p><p>其中，某一天的数据是按每天凌晨2点到第二天的凌晨2点来算（理想来说）</p><p>之所以是理想是因为不可能每个用户都能在2点这个时间段更新数据，可能会在0-2点区间内更新</p><p>之所以是凌晨2点是因为考虑到玩家的游戏习惯，喜欢将晚上玩的算入昨天的数据，尤其是玩的比较晚的玩家</p><blockquote><p>对于不同的服务器的用户，储存时间是按服务器当地时间来统计，不同服务器所在的时区如下</p></blockquote><p>注：不考虑冬夏令时的印象</p><ul><li>APAC: UTC+8</li><li>EU: UTC+1</li><li>NA: UTC-7</li><li>RU: UTC+3</li><li>CN: UTC+9</li></ul><h2 id="服务架构" tabindex="-1">服务架构 <a class="header-anchor" href="#服务架构" aria-label="Permalink to &quot;服务架构&quot;">​</a></h2><p>服务器采用主+从的方式，用于缓解单一服务器对于大量用户的数据更新请求会出现更新时间较慢或者压力较大</p><p>子服务器通过从主服务器获取需要更新的用户，通过遍历用户的数据，更新主服务的user_info表，其中主服务器的更新进程发现user_info的表数据发生变动，更新时间大于recent的更新时间，则确定是有更新数据</p><p>![图片]</p><h2 id="主要组件" tabindex="-1">主要组件 <a class="header-anchor" href="#主要组件" aria-label="Permalink to &quot;主要组件&quot;">​</a></h2><p>主服务器：recent.db用于储存所有的用户</p><p>主服务器：user_info.db获取用户活跃数据</p><p>子服务器：每次从主服务读取1w个用户，更新数据</p><p>recent数据库：存储个人的recent数据</p><h2 id="具体逻辑" tabindex="-1">具体逻辑 <a class="header-anchor" href="#具体逻辑" aria-label="Permalink to &quot;具体逻辑&quot;">​</a></h2><h3 id="子服务器更新逻辑" tabindex="-1">子服务器更新逻辑 <a class="header-anchor" href="#子服务器更新逻辑" aria-label="Permalink to &quot;子服务器更新逻辑&quot;">​</a></h3><p>1.从主服务器的recent.db获取用户数据，获取某个服务器的用户数据</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    recent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">account_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    recent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">region_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    recent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">update_time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">active_level</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">is_public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">total_battles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">last_battle_time</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    recent recent</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INNER JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    user_info user</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">account_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> recent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">account_id</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    recent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">region_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> %s</span></span></code></pre></div><p>2.遍历这1w个用户，检查update_time和active_level，判断是否需要更新</p><blockquote><p>其中服务器当地时间的22-2点为特殊时段，这个时间段内由于跨日需要新的文件</p></blockquote><h4 id="非特殊时间段active-level对应的recent更新频率" tabindex="-1">非特殊时间段Active_Level对应的recent更新频率 <a class="header-anchor" href="#非特殊时间段active-level对应的recent更新频率" aria-label="Permalink to &quot;非特殊时间段Active_Level对应的recent更新频率&quot;">​</a></h4><table tabindex="0"><thead><tr><th>active_level</th><th>recent_update_time</th></tr></thead><tbody><tr><td>0</td><td>8h</td></tr><tr><td>1</td><td>8h</td></tr><tr><td>2</td><td>1h</td></tr><tr><td>3</td><td>2h</td></tr><tr><td>4</td><td>4h</td></tr><tr><td>5</td><td>4h</td></tr><tr><td>6</td><td>4h</td></tr><tr><td>7</td><td>6h</td></tr><tr><td>8</td><td>6h</td></tr><tr><td>9</td><td>8h</td></tr></tbody></table><h4 id="特殊时间段active-level对应的recent更新频率" tabindex="-1">特殊时间段Active_Level对应的recent更新频率 <a class="header-anchor" href="#特殊时间段active-level对应的recent更新频率" aria-label="Permalink to &quot;特殊时间段Active_Level对应的recent更新频率&quot;">​</a></h4><table tabindex="0"><thead><tr><th>active_level</th><th>recent_update_time</th></tr></thead><tbody><tr><td>0</td><td>2h</td></tr><tr><td>1</td><td>2h</td></tr><tr><td>2</td><td>20m</td></tr><tr><td>3</td><td>30m</td></tr><tr><td>4</td><td>40m</td></tr><tr><td>5</td><td>1h</td></tr><tr><td>6</td><td>2h</td></tr><tr><td>7</td><td>3h</td></tr><tr><td>8</td><td>3h</td></tr><tr><td>9</td><td>4h</td></tr></tbody></table><p>3.将数据更新到主服务的user_info.db表中</p><h3 id="主服务器架构" tabindex="-1">主服务器架构 <a class="header-anchor" href="#主服务器架构" aria-label="Permalink to &quot;主服务器架构&quot;">​</a></h3><p>基本功能同子服务器，是子服务器的容灾备份，防止子服务器出现宕机导致数据更新失败</p><p>在子服务器的基础上，加上数据更新写入的功能，发现user_info的更新时间大于recent，则触发recent数据的更新，写入recent的sqlite3的数据库</p><p>同时需要负责跨日更新时的数据复制功能，检查recent的上次更新时间，如果更新的日期-2h和当前的日期不同的话则将昨日的数据复制一份到当前的数据库，作为今天数据的初始数据</p>`,33)]))}const o=s(n,[["render",l]]);export{E as __pageData,o as default};
